4.10: 2/2/2011
	* CORE: Revamped the logging classes to use Levels.  Also added a JavaUtilLog implementation.
	* CORE: Added support for the foreignAutoRefresh boolean in DatabaseField which automagically refreshes foreign fields.
	* CORE: Significantly refactored the RawResults class (now deprecated) and created GenericRawResults.
	* CORE: Dao.queryForAllRaw() and Dao.iteratorRaw() now deprecated.  Replaced with Dao.queryRaw() methods. 
	* CORE: Added the ability to get results as an array of Objects when you pass in the column-types.
	* CORE: Found some unclosed statements in the update(PreparedUpdate) and delete(PreparedDelete) methods.  Fixes bug #3170021.
	* ANDROID: Added missing OrmLiteBaseListActivity base class.
	* ANDROID: Reordered the log class detection to put Android Log before commons logging.  Fixes bug #3167100.
	* ANDROID: Split out the -core from this package.  You now need to install BOTH the core and android (or jdbc) packages.
	* ANDROID: Removed the deprecated AndroidTableUtils class.
	* ANDROID: Better wrapping of android.database.SQLException with java.sql.SQLException.
	* JDBC: Split out the -core from this package.  You now need to install BOTH the core and jdbc (or android) packages.
	* ALL: Added LICENSE.txt file to all releases and documentation.  It is basically the ISC public domain license. 

4.9: 1/26/2011
	* CORE: Changed the generated index names to have a table-name prefix and always have a "_idx" suffix.

4.8: 1/25/2011
	* CORE: Added uniqueIndex = true and uniqueIndexName = "..." to the DatabaseField annotation to create unique indexes.
	* ANDROID: Fixed the resulting jar so that it doesn't include the -core java files as well.
	* JDBC: Fixed the resulting jar so that it doesn't include the -core java files as well.

4.7: 1/24/2011
	* CORE: Added index = true and indexName = "..." to the DatabaseField annotation to create indexes.  Thanks to Larry.
	* CORE: Added a <T,ID> generic arguments to the Where() to support a convenience prepare() method.
	* CORE: Added a close() method to RawResults which will close the iterator if returned from iteratorRaw().
	* ANDROID: Fixed the javadocs so they get merged in from CORE.  Still struggling with the source jar.
	* JDBC: Fixed the javadocs so they get merged in from CORE.  Thanks to jaxelrod.  Still struggling with the source jar.

4.6: 12/15/2010
	* CORE: Fixed issues with infinite recursion if there is a foreign object loop.  Fixes bug #3137579.
	* CORE: Revamped a lot of the call structure internally to make way for the SimpleDB backend.  Exposed the FieldType array more.
	* CORE: Removed some old deprecated methods from QueryBuilder and TableUtils.
	* ANDROID: Added protection in case the subclass onCreate is called so another connection is not saved.  Fixes bug #3117883.

4.5: 11/17/2010
	* CORE: Fixes some problems with Dates and Enums being id types.
	* CORE: Fixed a big problem with boolean value escaping for some database types.  Fixed bug #3110466. 
	* CORE: Added code to throw exceptions when Serializable fields are ids or part of SQL comparison.  Fixed bug #3110468.
	* CORE: Added support for fields being required to be SelectArgs (Date for example).  Fixes bug #3110948.
	* JDBC: Added better detection of database types from the URL.
	* JDBC: Changed SQLite boolean representation to be 1/0 instead of true/false.  Fixed bug #3110467.
	* JDBC: Added callBatchTasks() method to the Dao for running batch tasks.  Not applicable to Android.
	* JDBC: Removed some deprecated methods from DatabaseTypeUtils.
	* JDBC: Significantly improved the testing for all field types.  Thanks to Larry for point out some critical bugs.

4.4: 11/10/2010
	* CORE: Fixed a major problem with refreshing some field types.  Fixes bug #3106962.

4.3: 11/9/2010
	* CORE: Renamed the ConnectionSource#saveTransactionConnection and clear to be saveSpecialConnection and clear.
	* CORE: Added functionality to RawResults to get all results as a List<String[]>.
	* CORE: Added functionality to RawResults to get all results as a List<T> with RawRowMapper.
	* CORE: Added nested transaction support.  Had to add per-database checks.  Fixes bug #3106108.
	* CORE: Added walking up the super classes to find database fields.  Fixes bug #3106109.
	* CORE: Added an isClosed() method to DatabaseConnection so the connection source can detect problems.
	* CORE: Removed some deprecated methods from the DAO and around the prepared statement code.
	* CORE: Added to the manual a section on identity columns.  Another section on database flavor notes.
	* JDBC: Added protection against inner connection saves.
	* ANDROID: Solve the problem of recursion in onCreate and onUpdate differently.  Fixes bug #3096875.

4.2: 10/13/2010
	* CORE: Improved messaging around unknown columns.
	* CORE: Added a save and clearTransactionConnection to the TransactionManager.  Fixes bug #3085345.
	* CORE: Added a missing releaseConnection call to the transactionManager.  Fixes bug #3085344.
	* CORE: TableUtils was not releasing its database connection for table create/drop.  Fixes bug 3086752.
	* JDBC: Added new reentrant, pooled connection manager JdbcPooledConnectionSource.  Needs to be reviewed!!
	* JDBC: Added support for transactions to DataSourceConnectionSource and pooled connection sources.
	* ANDROID: none

4.1: 10/8/2010
	* CORE: removed some old deprecated methods.
	* JDBC: fixed problem where connections were not being closed in the DataSource wrapper.  Fixes bug #3083799.
	* ANDROID: none

4.0: 10/3/2010
	* CORE: Removed most external usage of the DatabaseType since the ConnectionSource now provides it.
	* CORE: BaseDaoImpl now knows how to self-initialize if constructed with the ConnectionSource.
	* CORE: Dao.queryBuilder() now returns a QueryBuilder.  You call QueryBuilder.prepare() to get a PreparedQuery.
	* CORE: Added Dao.updateBuilder() and deleteBuilder() for constructing custom UPDATE and DELETE statements.
	* CORE: Tightened up some more classes to remove unnecessary allocations.
	* JDBC: Deprecated the DatabaseTypeUtils calls since we should just construct a JdbcConnectionSource directly.
	* JDBC: Removed the DatabaseTypeFactory and simplified the Spring code since we removed the external DatabaseType.
	* JDBC: JdbcConnectionSource now knows how to self-initialize if constructed with the URL.
	* JDBC: DataSourceConnectionSource now needs the database URL as well as the DataSource.
	* ANDROID: Made changes to OrmLiteSqliteOpenHelper to remove the DatabaseType references.

3.5: 9/28/2010
	* CORE: Revamped the StatementBuilder to allow foreign fields to be queried from the object as opposed to just its id.
	* CORE: Because of the internal changes, the prepareStatment() call now can throw SQLException.
	* CORE: Significantly reduced the number of objects created by the DAO and other classes to lower GC overhead.
	* ANDROID: Core refactoring should improve speeds due to reduced memory overhead

3.4: 9/24/2010
	* CORE: Revamped the log factory to use the internal LogType enum better and to construct the logs using reflection.
	* CORE: Added javax unique=true handling which should have been in 3.3.
	* ANDROID: Moved the AndroidLog implementation over to the Android package and reworked it to make direct calls to the android.util.Log.
	* ANDROID: Fixed problem with Android cursor were the field-name escape characters were in the column map.  Fixes bug #3074249.

3.3: 9/22/2010
	* CORE: Added UNIQUE constraint handling for ensuring fields are unique in all rows of the table.
	* CORE: Added a missing deprecated BaseJdbcDao that should have been in 3.2.
	* CORE: Added a better 'Getting Started' section to the manual.  Thanks much Nelson!
	* JDBC: Added a missing setDataSource to the DataSourceConnectionSource (fixes bug #3066894).

3.2: 9/14/2010
	* Large internal code reorganization to allow database calls outside of JDBC for better Android support.
	* Split ormlite into 3 packages: -core, -jdbc, and -android
	* Abstracted DataSource/Connection/ResultSet classes to be ConnectionSource/DatabaseConnection/DatabaseResults interfaces.
	* Renamed the BaseJdbcDao to be BaseDaoImpl since it is no longer just JDBC
	* Renamed Dao.queryBuilder() -> Dao.statementBuilder() to accommodate custom delete, etc. statements
	* Renamed the QueryBuilder object to be StatementBuilder
	* Renamed the PreparedQuery object to be PreparedStmt
	* You don't set your DataSource on the DAOs anymore.  You use the DataSourceDatabaseConnection wrapper class.
	* Created an internal SqlType enumeration which was a better external abstraction of SQL type integers.

2.12: 8/16/2010
	* Added a logger which should detect and delegate to the internal Android logger.
	* Changed the logger classes to use reflection to remove the compilation errors if classes aren't there.
	* Added to the documentation on how to remove log classes which are red because of missing classes.

2.11: 8/13/2010
	* Removed the final dependency by using reflection to get at the javax.persistance annotations.
	* Added a persisted boolean to DatabaseField annotation so you can easily disable a field.

2.10: 8/13/2010
	* Added some better support for Android OS built-in and 3rd party JDBC drivers.

2.9: 8/11/2010
	* Found and fixed embarrassing problem where the local logger wasn't filtering by level. (bug #3043423)
	* Improved some docs.

2.8: 7/20/2010
	* Found and fixed problems with boolean default values under Derby. (bug #3032387)
	* Trickle down changes which affected a lot of FieldType and JdbcType. Also improved the null handling.
	* Fixed the docs which referenced the BaseDao which was completely wrong.

2.7: 7/19/2010
	* Revamped the logging classes so we can remove the hard dependency on commons-logging.
	* Changed MySQL to use DATETIME instead of TIMESTAMP for Date fields.
	* Added the createDao static method to the BaseJdbcDao so you can create DAOs without a new class.

2.6: 7/7/2010
	* Fixed bug 3026487 where the limit in QueryBuilder was removed after a prepare.
	* Added log wrapping so we can remove the commons-logging dependency and replace it with a LocalLog impl.
	* Isolated the javax.persistence usage into one class for easy removal.
	* Renamed some database type methods.

2.5: 6/28/2010
	* Finally figured out all of the tricky conf settings to get ORMLite published to the central maven repo.

2.4: 6/26/2010
	* Fixed bug with Derby and Hsqldb where raw queries would not match quoted names. Capitalized field names.
	* Fixed a problem where value quoting for numbers and string arguments weren't handled right.
	* Fixed problem in MySQL where timestamps were by default not-null and set to the current time.
	* Fixed problem where default value and null specifier were generated in wrong order in CREATE TABLE.
	* Removed the restriction that primitive values couldn't have default values. Not sure why that was added.
	* Added initial code to allow the user to run raw String queries through the DAOs.
	* Changed the iterator returned by the Dao to a CloseableIterator to hide internal methods.
	* Added throwIfNull annotation to DatabaseField to throw if a null field is pulled into a primitive.

2.3: 6/23/2010
	* Fixed a problem with null handling which would come back as 0s.

2.2: 6/18/2010
	* Added enum support with both integer orderinal and string name support.
	* Changed the mechanism for detecting foreign fields with the the javax.annotations.

2.1: 6/14/2010
	* Added the ability of storing Serializable objects as the new SERIALIZABLE type.
	* Fixed problem with generated ids under MS SQL.
	* Trimmed the test dependencies and documented them.
	* Got rid of unused close and destroy methods on the DAOs and JdbcTemplate.
	* Fixed bug with username and password settings on the connection.
	* Added Java 6 methods to the data source. Fixed Java 6 compile error.

2.0: 6/12/2010
	* Finally took the plunge and removed the Spring dependency.  Down to 2 dependencies.

1.13: 6/11/2010
	* Fixed Postgres mixed case problem with fields and sequence numbers.

1.12: 6/7/2010
	* Added database column case conversion because postgres had some problems with sequence name case
	* Added support for javax.persistence annotations (@Entity, @Column, @Id, @GeneratedValue).
	* Added a cache of the column positions for mapped queries to make the looking up of column names faster.
	* Finished up the next texinfo online and print documentation.
	* Added an initial try at a DB2 database type. Completely untested.
