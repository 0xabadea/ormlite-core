package com.j256.ormlite.jdbc;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

import com.j256.ormlite.support.DatabaseConnection;
import com.j256.ormlite.support.PreparedStmt;

public class JdbcDatabaseConnection implements DatabaseConnection {

	private Connection connection;
	private DatabaseMetaData metaData = null;

	public JdbcDatabaseConnection(Connection connection) {
		this.connection = connection;
	}

	public boolean isSupportsSavepoints() throws SQLException {
		if (metaData == null) {
			metaData = connection.getMetaData();
		}
		return metaData.supportsSavepoints();
	}

	public boolean getAutoCommit() throws SQLException {
		return connection.getAutoCommit();
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		connection.setAutoCommit(autoCommit);
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return connection.setSavepoint(name);
	}

	public void commit() throws SQLException {
		connection.commit();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		connection.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		connection.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		connection.rollback(savepoint);
	}

	public PreparedStmt prepareStatement(String sql) throws SQLException {
		return new JdbcPreparedStmt(connection.prepareStatement(sql));
	}

	public PreparedStmt prepareStatementForOneResult(String sql) throws SQLException {
		return new JdbcPreparedStmt(connection.prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY));
	}

	public PreparedStmt prepareStatementWithAutoGeneratedKeys(String sql) throws SQLException {
		return new JdbcPreparedStmt(connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS));
	}

	public void close() throws SQLException {
		connection.close();
	}

	public boolean isClosed() throws SQLException {
		return connection.isClosed();
	}
}
